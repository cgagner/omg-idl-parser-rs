use std::str::FromStr;

grammar;

//----------------------------------------------------------------------------
// Building Block Core Data Types
//----------------------------------------------------------------------------

// (1)
pub Document: () = {
  definition+
}

// (2)
definition: () = {
  module_dcl ";",
  const_dcl ";",
  type_dcl ";", 
  // (71) Building Block Interfaces - Basic
  except_dcl ";",
  interface_dcl ";",
  // (98) Building Block Value Types
  value_dcl ";",
  // (111) Building Block CORBA-Specific - Interfaces
  type_id_dcl ";",
  type_prefix_dcl ";", 
  import_dcl ";",
  // (133) Building Block Components - Basic
  component_dcl ";",
  // (144) Building Block Components - Home
  // TODO: Fix home_dcl
  //home_dcl ";",
  // (153) Building Block CCM-Specific
  // TODO: Fix event_dcl
  //event_dcl ";",
  // (171) Building Block Components - Ports and Connectors
  porttype_dcl ";",
  connector_dcl ";",
  // (184) Building Block Template Modules
  template_module_dcl ";",
  // TODO: Fix template_module_inst
  //template_module_inst ";",
  // (218) Building Block Annotations
  // TODO: Fix annotation_dcl
  //annotation_dcl " ;",
}


// (3)
module_dcl: () = {
  "module" identifier "{" definition+ "}" => println!("Found module:" )
}

// (4)
scoped_name: () = {
  identifier,
  "::" identifier,
  scoped_name "::" identifier
}

// (5)
const_dcl: () = {
  "const" const_type identifier "=" const_expr
}

// (6)
const_type: () = {
  integer_type,
  floating_pt_type,
  fixed_pt_const_type,
  char_type,
  wide_char_type,
  boolean_type,
  octet_type,
  string_type,
  wide_string_type,
  scoped_name,
}

// (7)
const_expr: () = {
  or_expr
}

// (8)
or_expr: () = {
  xor_expr,
  or_expr "|" xor_expr,
}

// (9)
xor_expr: () = {
  and_expr,
  xor_expr "^" and_expr
}

// (10)
and_expr: () = {
  shift_expr,
  and_expr "&" shift_expr
}

// (11)
shift_expr: () = {
  add_expr,
  shift_expr ">>" add_expr,
  shift_expr "<<" add_expr,
} 

// (12)
add_expr: () = {
  mult_expr,
  add_expr "+" mult_expr,
  add_expr "-" mult_expr,
}

// (13)
mult_expr: () = {
  unary_expr,
  mult_expr "*" unary_expr,
  mult_expr "/" unary_expr,
  mult_expr "%" unary_expr,
}

// (14)
unary_expr: () = {
  unary_operator primary_expr,
  primary_expr
}

// (15)
unary_operator: () = {
  "-",
  "+",
  "~",
}

// (16)
primary_expr: () = {
  scoped_name,
  literal,
  "(" const_expr ")",
}

// (17)
literal: () = {
  integer_literal,
  floating_pt_literal,
  fixed_pt_literal,
  character_literal,
  wide_character_literal,
  boolean_literal,
  string_literal,
  wide_string_literal,
}

// (18)
boolean_literal: () = {
  "TRUE",
  "FALSE",
}

// (19)
positive_int_const: () = {
  const_expr
}

// (20)
type_dcl: () = {
  const_type_dcl,
  native_dcl,
  typedef_dcl,
}

// (21)
type_spec: () = {
  simple_type_spec,
  // (216) Building Block Anonymous Types
  template_type_spec,
}

// (22)
simple_type_spec: () = {
  base_type_spec,
  scoped_name,
}

// (23)
base_type_spec: () = {
  integer_type,
  floating_pt_type,
  char_type,
  wide_char_type,
  boolean_type,
  octet_type,
  // (69) Building Block Any
  any_type,
  // (117) Building Block CORBA-Specific - Interfaces
  object_type,
  // (131) Building Block CORBA-Specific - Value Types
  value_base_type,
}

// (24)
floating_pt_type: () = {
  "float",
  "double",
  "long" "double",
}

// (25)
integer_type: () = {
  signed_int,
  unsigned_int,
}

// (26)
signed_int: () = {
  signed_short_int,
  signed_long_int,
  signed_longlong_int,
  // (206) Building Block Extended Data-Types
  signed_tiny_int
}

// (27)
signed_short_int: () = {
  "short",
  // (210) Building Block Extended Data-Types
  "int16",
}

// (28)
signed_long_int: () = {
  "long",
  // (211) Building Block Extended Data-Types
  "int32",
}

// (29)
signed_longlong_int: () = {
  "long" "long",
  // (212) Building Block Extended Data-Types
  "int64",
}


// (30)
unsigned_int: () = {
  unsigned_short_int,
  unsigned_long_int,
  unsigned_longlong_int,
  // (207) Building Block Extended Data-Types
  unsigned_tiny_int
}

// (31)
unsigned_short_int: () = {
  "unsigned" "short",
  // (213) Building Block Extended Data-Types
  "uint16",
}

// (32)
unsigned_long_int: () = {
  "unsigned" "long",
  // (214) Building Block Extended Data-Types
  "uint32",
}

// (33)
unsigned_longlong_int: () = {
  "unsigned" "long" "long",
  // (215) Building Block Extended Data-Types
  "uint64",
}

// (34)
char_type: () = {"char"}

// (35)
wide_char_type: () = {"wchar"}

// (36)
boolean_type: () = {"boolean"}

// (37)
octet_type: () = {"octet"}

// (38)
template_type_spec: () = {
  sequence_type,
  string_type,
  wide_string_type,
  fixed_pt_type,
  // (197) Building Block Extended Data-Types
  map_type,
}

// (39)
sequence_type: () = {
  "sequence" "<" type_spec "," positive_int_const ">",
  "sequence" "<" type_spec ">",
}

// (40)
string_type: () = {
  "string" "<" positive_int_const ">",
  "string",
}

// (41)
wide_string_type: () = {
  "wstring" "<" positive_int_const ">",
  "wstring",
}

// (42)
fixed_pt_type: () = {
  "fixed" "<" positive_int_const "," positive_int_const ">"
}

// (43)
fixed_pt_const_type: () = {
  "fixed"
}

// (44)
const_type_dcl: () = {
  struct_dcl,
  union_dcl,
  enum_dcl,
  // (198) Building Block Extended Data-Types
  bitset_dcl,
  bitmask_dcl,
}

// (45)
struct_dcl: () = {
  struct_def,
  struct_forward_dcl,
}

// (46)
struct_def: () = {
  "struct" identifier "{" member+ "}",
  // (195) Building Block Extended Data-Types
  "struct" identifier ":" scoped_name "{" member* "}",
  "struct" identifier "{" "}",
}

// (47)
member: () = {
  type_spec declarators ";"
}

// (48)
struct_forward_dcl: () = {
  "struct" identifier,
}

// (49)
union_dcl: () = {
  union_def,
  union_forward_dcl,
}

// (50)
union_def: () = {
  "union" identifier "switch" "(" switch_type_spec ")" "{" switch_body "}"
}

// (51)
switch_type_spec: () = {
  integer_type,
  char_type,
  boolean_type,
  scoped_name,
  // (196) Building Block Extended Data-Types
  wide_char_type,
  octet_type,
}

// (52)
switch_body: () = {
  case+
}

// (53)
case: () = {
  case_label+ element_spec ";"
}

// (54)
case_label: () = {
  "case" const_expr ":",
  "default" ":",  
}

// (55)
element_spec: () = {
  type_spec declarator
}

// (56)
union_forward_dcl: () = {
  "union" identifier
}

// (57)
enum_dcl: () = {
  "enum" identifier "{" enumerators "}"
}

enumerators: () = {
  enumerator,
  enumerators "," enumerator
}

// (58)
enumerator: () = { identifier }

// (59)
array_declarator: () = {
  identifier fixed_array_size+
}

// (60)
fixed_array_size: () = {
  "[" positive_int_const "]"
}

// (61)
native_dcl: () = {
  "native" simple_declarator
}

// (62)
simple_declarator: () = {
  identifier
}

// (63)
typedef_dcl: () = {
  "typedef" type_declarator
}

// (64)
type_declarator: () = {
  type_declarator_base any_declarators
}

type_declarator_base: () = {
  simple_type_spec,
  template_type_spec,
  const_type_dcl,
}

// (65)
any_declarators: () = {
  any_declarator,
  any_declarators "," any_declarator
}

// (66)
any_declarator: () = {
  simple_declarator,
  array_declarator,
}

// (67)
declarators: () = {
  declarator,
  declarators "," declarator
}

// (68)
declarator: () = {
  simple_declarator,
  // (217) Building Block Anonymous Types
  array_declarator,
}

// (69) Handled above
// <base_type_spec> ::+ <any_type>

// (70)
any_type: () = {
  "any"
}

//----------------------------------------------------------------------------
// Building Block Interfaces
//----------------------------------------------------------------------------

// (71) Handled above
// <definition> ::+ <except_dcl> ";" | <interface_dcl> ";"

// (72)
except_dcl: () = {
  "exception" identifier "{" member* "}"
}

// (73)
interface_dcl: () = {
  interface_def,
  interface_forward_dcl
}

// (74)
interface_def: () = {
  interface_header "{" interface_body "}"
}

// (75)
interface_forward_dcl: () = {
  interface_kind identifier
}

// (76)
interface_header: () = {
  interface_kind identifier interface_inheritance_spec?
}

// (77)
interface_kind: () = {
  "interface",
  // (119) Building Block CORBA-Specific - Interfaces
  "local" "interface",
  // (129) Building Block CORBA-Specific - Value Types
  "abstract" "interface",
}

// (78)
interface_inheritance_spec: () = {
  ":" interface_name ("," interface_name)*
}

// (79)
interface_name: () = {
  scoped_name
}

// (80)
interface_body: () = {
  export*
}

// (81)
export: () = {
  op_dcl ";",
  attr_dcl ";"
  // (97) Building Block Interfaces - Full
  type_dcl ";",
  const_dcl ";",
  except_dcl ";",
  // (112) Building Block CORBA-Specific - Interfaces
  type_id_dcl ";",
  type_prefix_dcl ";",
  import_dcl ";",
  op_oneway_dcl ";",
  op_with_context ";",
}

// (82)
op_dcl: () = {
  op_type_spec identifier "(" parameter_dcls? ")" raises_expr?
}

// (83)
op_type_spec: () = {
  type_spec,
  "void"
}

// (84)
parameter_dcls: () = {
  param_dcl,
  parameter_dcls "," param_dcl
}

// (85)
param_dcl: () = {
  param_attribute type_spec simple_declarator
}

// (86)
param_attribute: () = {
  "in",
  "out",
  "inout",
}

// (87)
raises_expr: () = {
  "raises" "(" scoped_name ("," scoped_name)* ")"
}

// (88)
attr_dcl: () = {
  readonly_attr_spec,
  attr_spec,
}

// (89)
readonly_attr_spec: () = {
  "readonly" "attribute" type_spec readonly_attr_declarator
}

// (90)
readonly_attr_declarator: () = {
  simple_declarator raises_expr,
  simple_declarators
}

simple_declarators: () = {
  simple_declarator,
  simple_declarators "," simple_declarator,
}

// (91)
attr_spec: () = {
  "attribute" type_spec attr_declarator
}

// (92)
attr_declarator: () = {
  simple_declarator attr_raises_expr,
  simple_declarators
}

// (93)
attr_raises_expr: () = {
  get_excep_expr set_excep_expr?,
  set_excep_expr,
}

// (94)
get_excep_expr: () = {
  "getraises" exception_list
}

// (95)
set_excep_expr: () = {
  "setraises" exception_list
}

// (96)
exception_list: () = {
  "(" scoped_name ("," scoped_name)* ")"
}

// (97) Handled above
// <export> ::+ <type_dcl> ";" | <const_dcl> ";" | <except_dcl> ";"

//----------------------------------------------------------------------------
// Building Block Value
//----------------------------------------------------------------------------

// (98) Handled above
// <definition> ::+ <value_dcl> ";" 

// (99) 
value_dcl: () = {
  value_def,
  value_forward_dcl,
  // (125) Building Block CORBA-Specific - Value Types
  // TODO: Fix value_box_def and value_abs_def
  //value_box_def,
  //value_abs_def,
}

// (100)
value_def: () = {
  value_header "{" value_element* "}"
}

// (101)
value_header: () = {
  // NOTE: value_inheritance_spec is optional. However, the first option in
  // value_inheritance_spec can be empty so we don't need to make it optional
  // here.
  value_kind identifier value_inheritance_spec //?
}

// (102)
value_kind: () = {
  "valuetype",
  // (128) Building Block CORBA-Specific Value 
  "custom" "valuetype",
}

// (103)
value_inheritance_spec: () = {
  // NOTE: without a whitespace after the colon, this statement causes conflicts
  (r":\\s+" value_name)? ("supports" interface_name)?,
  // (130) Building Block CORBA-Specific - Value Types
  ":" "truncatable"? value_name ("," value_name)* ("supports" interface_name ("," interface_name)*)?,
}

// (104)
value_name: () = {
  scoped_name
}

// (105)
value_element: () = {
  export, 
  state_member,
  init_dcl
}

// (106)
state_member: () = {
  "public" type_spec declarators ";",
  "private" type_spec declarators ";"
}

// (107)
init_dcl: () = {
  "factory" identifier "(" init_param_dcls? ")" raises_expr? ";"
}

// (108)
init_param_dcls: () = {
  init_param_dcl,
  init_param_dcls "," init_param_dcl
}

// (109)
init_param_dcl: () = {
  "in" type_spec simple_declarator
}

// (110)
value_forward_dcl: () = {
  value_kind identifier
}

//----------------------------------------------------------------------------
// Building Block CORBA-Specific Interfaces
//----------------------------------------------------------------------------

// (111) Handled above
// <definition> ::+ <type_id_dcl> ";" | <type_prefix_dcl> ";" | <import_dcl> ";"

// (112) Handled above
// <export> ::+ <type_id_dcl> ";" | <type_prefix_dcl> ";" | <import_dcl> ";" | <op_oneway_dcl> ";" | <op_with_context> ";"

// (113)
type_id_dcl: () = {
  "typeid" scoped_name string_literal
}

// (114)
type_prefix_dcl: () = {
  "typeprefix" scoped_name string_literal
}

// (115)
import_dcl: () = {
  "import" imported_scope
}

// (116)
imported_scope: () = {
  scoped_name,
  string_literal
}

// (117) Handled above
// <base_type_spec> ::+ <object_type>

// (118)
object_type: () = {
  "Object"
}

// (119) Handled above
// <interface_kind> ::+ "local" "interface"

// (120)
op_oneway_dcl: () = {
  "oneway" "void" identifier "(" in_parameter_dcls? ")"
}

// (121)
in_parameter_dcls: () = {
  in_param_dcl  ("," in_param_dcl)*
}

// (122)
in_param_dcl: () = { 
  "in" type_spec simple_declarator
}

// (123)
op_with_context: () = {
  op_dcl context_expr,
  op_oneway_dcl context_expr,
}

// (124)
context_expr: () = {
  "context" "(" string_literal ("," string_literal)* ")"
}

//----------------------------------------------------------------------------
// Building Block CORBA-Specific Value
//----------------------------------------------------------------------------

// (125) Handled above
// <value_dcl> ::+ <value_box_def> | <value_abs_def>

// (126)
value_box_def: () = {
  "valuetype" identifier type_spec
}

// (127)
value_abs_def: () = {
  "abstract" "valuetype" identifier value_inheritance_spec? "{" export* "}"
}

// (128) Handled above
// <value_kind> ::+ "custom" "valuetype"

// (129) Handled above
// <interface_kind> ::+ "abstract" "interface"

// (130) Handled above
// <value_inheritance_spec> ::+ ":" ["truncatable"] <value_name> { "," <value_name> }* [ "supports" <interface_name> { "," <interface_name> }* ]

// (131) Handled above
// <base_type_spec> ::+ <value_base_type>

// (132)
value_base_type: () = {
  "ValueBase"
}

//----------------------------------------------------------------------------
// Building Block Components Basic
//----------------------------------------------------------------------------

// (133) Handled above
// <definition> ::+ <component_dcl> ";"

// (134)
component_dcl: () = {
  component_def,
  component_forward_dcl
}

// (135)
component_forward_dcl: () = {
  "component" identifier
}

// (136)
component_def: () = {
  component_header "{" component_body "}"
}

// (137)
component_header: () = {
  "component" identifier component_inheritance_spec?,
  // (154) Building Block CCM-Specific
  "component" identifier component_inheritance_spec? supported_interface_spec,
}

// (138)
component_inheritance_spec: () = { 
  ":" scoped_name
}

// (139)
component_body: () = {
  component_export* 
}

// (140)
component_export: () = {
  provides_dcl ";", 
  uses_dcl ";", 
  attr_dcl ";",
  // (156) Building Block CCM-Specific
  emits_dcl ";",
  publishes_dcl ";",
  consumes_dcl ";",
  // (179) Building Block Components – Ports and Connectors
  port_dcl ";",
}

// (141)
provides_dcl: () = {
  "provides" interface_type identifier
}

// (142)
interface_type: () = {
  scoped_name,
  // (157) Building Block CCM-Specific
  "Object",
}

// (143)
uses_dcl: () = {
  "uses" interface_type identifier,
  // (158) Building Block CCM-Specific
  "uses" "multiple" interface_type identifier,
}

//----------------------------------------------------------------------------
// Building Block Components Home
//----------------------------------------------------------------------------

// (144) Handled above
// <definition> ::+ <home_dcl> ";"

// (145)
home_dcl: () = {
  home_header "{" home_body "}"
}

// (146)
home_header: () = {
  "home" identifier home_inheritance_spec? "manages" scoped_name,
  // (162) Building Block CCM-Specific
  "home" identifier home_inheritance_spec? supported_interface_spec? "manages" scoped_name primary_key_spec?,
}

// (147)
home_inheritance_spec: () = {
  ":" scoped_name
}

// (148)
home_body: () = { 
  home_export*
}

// (149)
home_export: () = { 
  export,
  factory_dcl ";",
  // (164) Building Block CCM-Specific
  <finder_dcl> ";"
}

// (150)
factory_dcl: () = {
  "factory" identifier "(" factory_param_dcls? ")" raises_expr?
}

// (151)
factory_param_dcls: () = {
  factory_param_dcl ("," factory_param_dcl)*
}

// (152)
factory_param_dcl: () = {
  "in" type_spec simple_declarator
}

//----------------------------------------------------------------------------
// Building Block CCM-Specific
//----------------------------------------------------------------------------

// (153) Handled above
// <definition> ::+ <event_dcl> ";"

// (154) Handled above
// <component_header> ::+ "component" <identifier> [ <component_inheritance_spec> ] <supported_interface_spec>

// (155)
supported_interface_spec: () = {
  "supports" scoped_name ("," scoped_name)*
}

// (156) Handled above
// <component_export> ::+ <emits_dcl> ";" | <publishes_dcl> ";" | <consumes_dcl> ";"

// (157) Handled above
// <interface_type> ::+ "Object"

// (158) Handled above
// <uses_dcl> ::+ "uses" "multiple" <interface_type> <identifier>

// (159)
emits_dcl: () = {
  "emits" scoped_name identifier
}

// (160)
publishes_dcl: () = {
  "publishes" scoped_name identifier
}

// (161)
consumes_dcl: () = { 
  "consumes" scoped_name identifier
}

// (162) Handled above
// <home_header> ::+ "home" <identifier> [ <home_inheritance_spec> ] [ <supported_interface_spec> ] "manages" <scoped_name> [ <primary_key_spec> ]

// (163)
primary_key_spec: () = { 
  "primarykey" scoped_name
}

// (164) Handled above
// <home_export> ::+ <finder_dcl> ";"

// (165)
finder_dcl: () = { 
  "finder" identifier "(" init_param_dcls? ")" raises_expr?
}

// (166)
event_dcl: () = { 
  event_def,
  event_abs_def,
  event_forward_dcl,
}

// (167)
event_forward_dcl: () = {
  "abstract"? "eventtype" identifier
}

// (168)
event_abs_def: () = { 
  "abstract" "eventtype" identifier value_inheritance_spec? "{" export* "}"
}

// (169)
event_def: () = { 
  event_header "{" value_element * "}"
}

// (170)
event_header: () = {
  "custom"? "eventtype" identifier value_inheritance_spec?
}

//----------------------------------------------------------------------------
// Building Block Components - Ports and Connectors
//----------------------------------------------------------------------------

// (171) Handled above
// <definition> ::+ <porttype_dcl> ";" | <connector_dcl> ";"

// (172)
porttype_dcl: () = {
  porttype_def,
  porttype_forward_dcl,
}

// (173)
porttype_forward_dcl: () = {
  "porttype" identifier
}

// (174)
porttype_def: () = {
  "porttype" identifier "{" port_body "}"
}

// (175)
port_body: () = {
  port_ref port_export*
}

// (176)
port_ref: () = {
  provides_dcl ";",
  uses_dcl ";",
  port_dcl ";",
}

// (177)
port_export: () = { 
  port_ref,
  attr_dcl ";"
}

// (178)
port_dcl: () = { 
  "port" scoped_name identifier,
  "mirrorport" scoped_name identifier,
}

// (179) Handled above
// <component_export> ::+ <port_dcl> ";"

// (180)
connector_dcl: () = {
  connector_header "{" connector_export+ "}"
}

// (181)
connector_header: () = {
  "connector" identifier connector_inherit_spec?
}

// (182)
connector_inherit_spec: () = {
  ":" scoped_name
}

// (183)
connector_export: () = { 
  port_ref,
  attr_dcl ";", 
}

//----------------------------------------------------------------------------
// Building Block Template Modules
//----------------------------------------------------------------------------
// (184) Handled above
// <definition> ::+ <template_module_dcl> ";" | <template_module_inst> ";"

// (185)
template_module_dcl: () = {
  "module" identifier "<" formal_parameters ">" "{" tpl_definition+ "}"
}

// (186)
formal_parameters: () = {
  formal_parameter ("," formal_parameter)*
}

// (187)
formal_parameter: () = {
  formal_parameter_type identifier
}

// (188)
formal_parameter_type: () = {
  "typename",
  "interface",
  "valuetype",
  "eventtype",
  "struct",
  "union",
  "exception",
  "enum",
  "sequence",
  "const" const_type,
  sequence_type,
}

// (189)
tpl_definition: () = {
  definition,
  template_module_ref ";",
}

// (190)
template_module_inst: () = {
  "module" scoped_name "<" actual_parameters ">" identifier
}

// (191)
actual_parameters: () = {
  actual_parameter,
  actual_parameters "," actual_parameter
}

// (192)
actual_parameter: () = {
  type_spec,
  const_expr,
}

// (193)
template_module_ref: () = {
  "alias" scoped_name "<" formal_parameter_names ">" identifier
}

// (194)
formal_parameter_names: () = { 
  identifier ("," identifier)*
}



//----------------------------------------------------------------------------
// Building Block Extended Data-Types
//----------------------------------------------------------------------------

// (195) Handled above
// <struct_def> ::+ "struct" <identifier> ":" <scoped_name> "{" <member>* "}" | "struct" <identifier> "{" "}"

// (196) Handled above
// <switch_type_spec> ::+ <wide_char_type> | <octet_type>

// (197) Handled above
// <template_type_spec> ::+ <map_type>

// (198) Handled above - added to const_type_dcl
// Is conststr a typo?
// <constr_type_dcl> ::+ <bitset_dcl> | <bitmask_dcl>

// (199)
map_type: () = {
  "map" "<" <type_spec> "," type_spec "," positive_int_const ">",
  "map" "<" <type_spec> "," type_spec ">",
}

// (200)
bitset_dcl: () = {
  "bitset" identifier identifier_scoped_name? "{" bitfield* "}"
}

identifier_scoped_name: () = {
  ":" scoped_name
}

// (201)
bitfield: () = {
  bitfield_spec identifier* ";"
}

// (202)
bitfield_spec: () = {
  "bitfield" "<" positive_int_const ">",
  "bitfield" "<" positive_int_const "," destination_type ">",
}

// (203)
destination_type: () = {
  boolean_type,
  octet_type,
  integer_type,
}

// (204)
bitmask_dcl: () = {
  "bitmask" identifier "{" bit_value ("," bit_value)* "}"
}

// (205)
bit_value: () = {
  identifier
}

// (206) Handled above
// <signed_int> ::+ <signed_tiny_int>

// (207) Handled above
// <unsigned_int> ::+ <unsigned_tiny_int>

// (208)
signed_tiny_int: () = {"int8"}

// (209)
unsigned_tiny_int: () = {"uint8"}

// (210) Handled above
// <signed_short_int> ::+ "int16"

// (211) Handled above
// <signed_long_int> ::+ "int32"

// (212) Handled above
// <signed_longlong_int> ::+ "int64"

// (213) Handled above
// <unsigned_short_int> ::+ "uint16"

// (214) Handled above
// <unsigned_long_int> ::+ "uint32"

// (215) Handled above
// <unsigned_longlong_int> ::+ "uint64"

//----------------------------------------------------------------------------
// Building Block Anonymous Types
//----------------------------------------------------------------------------

// (216) Handled above
// <type_spec> ::+ <template_type_spec>

// (217) Handled above
// <declarator> ::+ <array_declarator>

//----------------------------------------------------------------------------
// Building Block Annotations
//----------------------------------------------------------------------------

// (218) Handled above
// <definition> ::+ <annotation_dcl> " ;"

// (219)
annotation_dcl: () = { 
  annotation_header "{" annotation_body "}"
}

// (220)
annotation_header: () = { 
  "@annotation" identifier
}

// (221)
annotation_body: () = { 
  annotation_body_parts*
}

annotation_body_parts: () = {
  annotation_member,
  enum_dcl ";",
  const_dcl ";",
  typedef_dcl ";",
}

// (222)
annotation_member: () = { 
  annotation_member_type simple_declarator default_const_expr? ";"
}

default_const_expr: () = {
  "default" const_expr
}

// (223)
annotation_member_type: () = { 
  const_type, 
  any_const_type,
  scoped_name,
}

// (224)
any_const_type: () = {
  "any"
}

// (225)
annotation_appl: () = { 
  "@" scoped_name ( "(" annotation_appl_params ")" )?
}

// (226)
annotation_appl_params: () = { 
  const_expr,
  annotation_appl_param ("," annotation_appl_param)*
}

// (227)
annotation_appl_param: () = { 
  identifier "=" const_expr,
}

//----------------------------------------------------------------------------
// 
//----------------------------------------------------------------------------

// TODO: Remove these types
integer_literal: () = {}
floating_pt_literal: () = {}
fixed_pt_literal: () = {}
character_literal: () = {}
wide_character_literal: () = {}
string_literal: () = {}
wide_string_literal: () = {}


identifier: () = {
  r"[a-zA-Z][a-zA-Z0-9_]*" => println!("Found identifier: {:?}", <>)
}

//Expr: Box<Expr> = { // (1)
//    Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
//    Factor,
//};
//
//ExprOp: Opcode = { // (3)
//    "+" => Opcode::Add,
//    "-" => Opcode::Sub,
//};
//
//Factor: Box<Expr> = {
//    Factor FactorOp Term => Box::new(Expr::Op(<>)),
//    Term,
//};
//
//FactorOp: Opcode = {
//    "*" => Opcode::Mul,
//    "/" => Opcode::Div,
//};
//
//Term: Box<Expr> = {
//    Num => Box::new(Expr::Number(<>)),
//    "(" <Expr> ")"
//};
//
//Num: i32 = {
//    r"[0-9]+" => i32::from_str(<>).unwrap()
//};
